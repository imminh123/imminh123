{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/blog/[slug]/sandpack.tsx"],"sourcesContent":["'use client';\n\nimport { getSandpackCssText } from '@codesandbox/sandpack-react';\nimport { useServerInsertedHTML } from 'next/navigation';\n\nexport function SandpackCSS() {\n  useServerInsertedHTML(() => {\n    return (\n      <style\n        dangerouslySetInnerHTML={{ __html: getSandpackCssText() }}\n        id=\"sandpack\"\n      />\n    );\n  });\n  return null;\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAKO,SAAS;;IACd,CAAA,GAAA,qIAAA,CAAA,wBAAqB,AAAD,EAAE;QACpB,qBACE,6LAAC;YACC,yBAAyB;gBAAE,QAAQ,CAAA,GAAA,uKAAA,CAAA,qBAAkB,AAAD;YAAI;YACxD,IAAG;;;;;;IAGT;IACA,OAAO;AACT;GAVgB;;QACd,qIAAA,CAAA,wBAAqB;;;KADP"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/ApolloWrapper.tsx"],"sourcesContent":["\"use client\";\n// ^ this file needs the \"use client\" pragma\n\nimport { ApolloLink, HttpLink } from \"@apollo/client\";\nimport {\n  ApolloNextAppProvider,\n  NextSSRInMemoryCache,\n  NextSSRApolloClient,\n  SSRMultipartLink,\n} from \"@apollo/experimental-nextjs-app-support/ssr\";\n\n// have a function to create a client for you\nfunction makeClient() {\n  const httpLink = new HttpLink({\n    // this needs to be an absolute url, as relative urls cannot be used in SSR\n    uri: \"https://api.github.com/graphql\",\n    // you can disable result caching here if you want to\n    // (this does not work if you are rendering your page with `export const dynamic = \"force-static\"`)\n    fetchOptions: { cache: \"no-store\" },\n    headers: {\n      authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\n    },\n    // you can override the default `fetchOptions` on a per query basis\n    // via the `context` property on the options passed as a second argument\n    // to an Apollo Client data fetching hook, e.g.:\n    // const { data } = useSuspenseQuery(MY_QUERY, { context: { fetchOptions: { cache: \"force-cache\" }}});\n  });\n\n  return new NextSSRApolloClient({\n    // use the `NextSSRInMemoryCache`, not the normal `InMemoryCache`\n    cache: new NextSSRInMemoryCache(),\n    link:\n      typeof window === \"undefined\"\n        ? ApolloLink.from([\n            // in a SSR environment, if you use multipart features like\n            // @defer, you need to decide how to handle these.\n            // This strips all interfaces with a `@defer` directive from your queries.\n            new SSRMultipartLink({\n              stripDefer: true,\n            }),\n            httpLink,\n          ])\n        : httpLink,\n  });\n}\n\n// you need to create a component to wrap your app in\nexport function ApolloWrapper({ children }: React.PropsWithChildren) {\n  return (\n    <ApolloNextAppProvider makeClient={makeClient}>\n      {children}\n    </ApolloNextAppProvider>\n  );\n}"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;AAWA,6CAA6C;AAC7C,SAAS;IACP,MAAM,WAAW,IAAI,iKAAA,CAAA,WAAQ,CAAC;QAC5B,2EAA2E;QAC3E,KAAK;QACL,qDAAqD;QACrD,mGAAmG;QACnG,cAAc;YAAE,OAAO;QAAW;QAClC,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC5D;IAKF;IAEA,OAAO,IAAI,0NAAA,CAAA,sBAAmB,CAAC;QAC7B,iEAAiE;QACjE,OAAO,IAAI,gPAAA,CAAA,uBAAoB;QAC/B,MACE,OAAO,WAAW,cACd,mKAAA,CAAA,aAAU,CAAC,IAAI,CAAC;YACd,2DAA2D;YAC3D,kDAAkD;YAClD,0EAA0E;YAC1E,IAAI,uLAAA,CAAA,mBAAgB,CAAC;gBACnB,YAAY;YACd;YACA;SACD,IACD;IACR;AACF;AAGO,SAAS,cAAc,EAAE,QAAQ,EAA2B;IACjE,qBACE,6LAAC,0NAAA,CAAA,wBAAqB;QAAC,YAAY;kBAChC;;;;;;AAGP;KANgB"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}