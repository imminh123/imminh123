{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@apollo/server/src/generated/packageVersion.ts"],"sourcesContent":["export const packageVersion = \"4.10.4\";\n"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@apollo/server/src/plugin/schemaReporting/schemaReporter.ts"],"sourcesContent":["import fetch from 'node-fetch';\nimport type { GraphQLRequest } from '../../externalTypes/index.js';\nimport type { Logger } from '@apollo/utils.logger';\nimport type {\n  SchemaReport,\n  SchemaReportMutationVariables,\n  SchemaReportMutation,\n  ReportSchemaResponse,\n} from './generated/operations';\nimport type { Fetcher } from '@apollo/utils.fetcher';\nimport { packageVersion } from '../../generated/packageVersion.js';\n\n// Magic GraphQL comment allows codegen to find the query\n// prettier-ignore\nexport const schemaReportGql = /* GraphQL */ `#graphql\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`;\n\n// This class is meant to be a thin shim around the gql mutations.\nexport class SchemaReporter {\n  // These mirror the gql variables\n  private readonly schemaReport: SchemaReport;\n  private readonly coreSchema: string;\n  private readonly endpointUrl: string;\n  private readonly logger: Logger;\n  private readonly initialReportingDelayInMs: number;\n  private readonly fallbackReportingDelayInMs: number;\n  private readonly fetcher: Fetcher;\n\n  private isStopped: boolean;\n  private pollTimer?: NodeJS.Timeout;\n  private readonly headers: Record<string, string>;\n\n  constructor(options: {\n    schemaReport: SchemaReport;\n    coreSchema: string;\n    apiKey: string;\n    endpointUrl: string | undefined;\n    logger: Logger;\n    initialReportingDelayInMs: number;\n    fallbackReportingDelayInMs: number;\n    fetcher?: Fetcher;\n  }) {\n    this.headers = {\n      'Content-Type': 'application/json',\n      'x-api-key': options.apiKey,\n      'apollographql-client-name': 'ApolloServerPluginSchemaReporting',\n      'apollographql-client-version': packageVersion,\n    };\n\n    this.endpointUrl =\n      options.endpointUrl ||\n      'https://schema-reporting.api.apollographql.com/api/graphql';\n\n    this.schemaReport = options.schemaReport;\n    this.coreSchema = options.coreSchema;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    this.fetcher = options.fetcher ?? fetch;\n  }\n\n  public stopped(): boolean {\n    return this.isStopped;\n  }\n\n  public start() {\n    this.pollTimer = setTimeout(\n      () => this.sendOneReportAndScheduleNext(false),\n      this.initialReportingDelayInMs,\n    );\n  }\n\n  public stop() {\n    this.isStopped = true;\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n\n  private async sendOneReportAndScheduleNext(sendNextWithCoreSchema: boolean) {\n    this.pollTimer = undefined;\n\n    // Bail out permanently\n    if (this.stopped()) return;\n    try {\n      const result = await this.reportSchema(sendNextWithCoreSchema);\n      if (!result) {\n        return;\n      }\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(\n          () => this.sendOneReportAndScheduleNext(result.withCoreSchema),\n          result.inSeconds * 1000,\n        );\n      }\n      return;\n    } catch (error) {\n      // In the case of an error we want to continue looping\n      // We can add hardcoded backoff in the future,\n      // or on repeated failures stop responding reporting.\n      this.logger.error(\n        `Error reporting server info to Apollo during schema reporting: ${error}`,\n      );\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(\n          () => this.sendOneReportAndScheduleNext(false),\n          this.fallbackReportingDelayInMs,\n        );\n      }\n    }\n  }\n\n  public async reportSchema(\n    withCoreSchema: boolean,\n  ): Promise<ReportSchemaResponse | null> {\n    const { data, errors } = await this.apolloQuery({\n      report: this.schemaReport,\n      coreSchema: withCoreSchema ? this.coreSchema : null,\n    });\n\n    if (errors) {\n      throw new Error(errors.map((x: any) => x.message).join('\\n'));\n    }\n\n    function msgForUnexpectedResponse(data: any): string {\n      return [\n        'Unexpected response shape from Apollo when',\n        'reporting schema. If this continues, please reach',\n        'out to support@apollographql.com.',\n        'Received response:',\n        JSON.stringify(data),\n      ].join(' ');\n    }\n\n    if (!data || !data.reportSchema) {\n      throw new Error(msgForUnexpectedResponse(data));\n    }\n\n    if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n      return data.reportSchema;\n    } else if (data.reportSchema.__typename === 'ReportSchemaError') {\n      this.logger.error(\n        [\n          'Received input validation error from Apollo:',\n          data.reportSchema.message,\n          'Stopping reporting. Please fix the input errors.',\n        ].join(' '),\n      );\n      this.stop();\n      return null;\n    }\n    throw new Error(msgForUnexpectedResponse(data));\n  }\n\n  private async apolloQuery(\n    variables: SchemaReportMutationVariables,\n  ): Promise<{ data?: SchemaReportMutation; errors?: any[] }> {\n    const request: GraphQLRequest = {\n      query: schemaReportGql,\n      variables,\n    };\n\n    const httpResponse = await this.fetcher(this.endpointUrl, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request),\n    });\n\n    if (!httpResponse.ok) {\n      throw new Error(\n        [\n          `An unexpected HTTP status code (${httpResponse.status}) was`,\n          'encountered during schema reporting.',\n        ].join(' '),\n      );\n    }\n\n    try {\n      // JSON parsing failure due to malformed data is the likely failure case\n      // here.  Any non-JSON response (e.g. HTML) is usually the suspect.\n      return await httpResponse.json();\n    } catch (error) {\n      throw new Error(\n        [\n          \"Couldn't report schema to Apollo.\",\n          'Parsing response as JSON failed.',\n          'If this continues please reach out to support@apollographql.com',\n          error,\n        ].join(' '),\n      );\n    }\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@apollo/server/src/plugin/schemaIsSubgraph.ts"],"sourcesContent":["import {\n  type GraphQLSchema,\n  isObjectType,\n  isScalarType,\n  isNonNullType,\n} from 'graphql';\n\n// Returns true if it appears that the schema was appears to be of a subgraph\n// (eg, returned from @apollo/subgraph's buildSubgraphSchema). This strategy\n// avoids depending explicitly on @apollo/subgraph or relying on something that\n// might not survive transformations like monkey-patching a boolean field onto\n// the schema.\n//\n// This is used for two things:\n// 1) Determining whether traces should be added to responses if requested with\n//    an HTTP header. If you want to include these traces even for non-subgraphs\n//    (when requested via header, eg for Apollo Explorer's trace view) you can\n//    use ApolloServerPluginInlineTrace explicitly; if you want to never include\n//    these traces even for subgraphs you can use\n//    ApolloServerPluginInlineTraceDisabled.\n// 2) Determining whether schema-reporting should be allowed; subgraphs cannot\n//    report schemas, and we accordingly throw if it's attempted.\nexport function schemaIsSubgraph(schema: GraphQLSchema): boolean {\n  const serviceType = schema.getType('_Service');\n  if (!isObjectType(serviceType)) {\n    return false;\n  }\n  const sdlField = serviceType.getFields().sdl;\n  if (!sdlField) {\n    return false;\n  }\n\n  let sdlFieldType = sdlField.type;\n  if (isNonNullType(sdlFieldType)) {\n    sdlFieldType = sdlFieldType.ofType;\n  }\n  if (!isScalarType(sdlFieldType)) {\n    return false;\n  }\n  return sdlFieldType.name == 'String';\n}\n"],"names":[],"mappings":";;;;;;AAsBM,SAAU,iBAAiB,MAAqB;IACpD,MAAM,cAAc,OAAO,OAAO,CAAC;IACnC,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,eAAY,AAAZ,EAAa,cAAc;QAC9B,OAAO;IACT;IACA,MAAM,WAAW,YAAY,SAAS,GAAG,GAAG;IAC5C,IAAI,CAAC,UAAU;QACb,OAAO;IACT;IAEA,IAAI,eAAe,SAAS,IAAI;IAChC,IAAI,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAb,EAAc,eAAe;QAC/B,eAAe,aAAa,MAAM;IACpC;IACA,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,eAAY,AAAZ,EAAa,eAAe;QAC/B,OAAO;IACT;IACA,OAAO,aAAa,IAAI,IAAI;AAC9B"}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@apollo/server/src/plugin/schemaReporting/index.ts"],"sourcesContent":["import os from 'os';\nimport { internalPlugin } from '../../internalPlugin.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { printSchema, validateSchema, buildSchema } from 'graphql';\nimport { SchemaReporter } from './schemaReporter.js';\nimport { schemaIsSubgraph } from '../schemaIsSubgraph.js';\nimport type { SchemaReport } from './generated/operations.js';\nimport type { ApolloServerPlugin } from '../../externalTypes/index.js';\nimport type { Fetcher } from '@apollo/utils.fetcher';\nimport { packageVersion } from '../../generated/packageVersion.js';\nimport { computeCoreSchemaHash } from '../../utils/computeCoreSchemaHash.js';\n\nexport interface ApolloServerPluginSchemaReportingOptions {\n  /**\n   * The schema reporter waits before starting reporting.\n   * By default, the report waits some random amount of time between 0 and 10 seconds.\n   * A longer interval leads to more staggered starts which means it is less likely\n   * multiple servers will get asked to upload the same schema.\n   *\n   * If this server runs in lambda or in other constrained environments it would be useful\n   * to decrease the schema reporting max wait time to be less than default.\n   *\n   * This number will be the max for the range in ms that the schema reporter will\n   * wait before starting to report.\n   */\n  initialDelayMaxMs?: number;\n  /**\n   * Override the reported schema that is reported to the Apollo registry. This\n   * schema does not go through any normalizations and the string is directly\n   * sent to the Apollo registry. This can be useful for comments or other\n   * ordering and whitespace changes that get stripped when generating a\n   * `GraphQLSchema`.\n   *\n   * **If you pass this option to this plugin, you should explicitly configure\n   * `ApolloServerPluginUsageReporting` and pass the same value to its\n   * `overrideReportedSchema` option.** This ensures that the schema ID\n   * associated with requests reported by the usage reporting plugin matches the\n   * schema ID that this plugin reports. For example:\n   *\n   * ```js\n   * new ApolloServer({\n   *   plugins: [\n   *     ApolloServerPluginSchemaReporting({overrideReportedSchema: schema}),\n   *     ApolloServerPluginUsageReporting({overrideReportedSchema: schema}),\n   *   ],\n   * })\n   * ```\n   */\n  overrideReportedSchema?: string;\n  /**\n   * The URL to use for reporting schemas. Primarily for testing and internal\n   * Apollo use.\n   */\n  endpointUrl?: string;\n  /**\n   * Specifies which Fetch API implementation to use when reporting schemas.\n   */\n  fetcher?: Fetcher;\n}\n\nexport function ApolloServerPluginSchemaReporting(\n  {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher,\n  }: ApolloServerPluginSchemaReportingOptions = Object.create(null),\n): ApolloServerPlugin {\n  const bootId = uuidv4();\n\n  return internalPlugin({\n    __internal_plugin_id__: 'SchemaReporting',\n    __is_disabled_plugin__: false,\n    async serverWillStart({ apollo, schema, logger }) {\n      const { key, graphRef } = apollo;\n      if (!key) {\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n            'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`',\n        );\n      }\n      if (!graphRef) {\n        // This error is a bit imprecise as you can also specify ID and variant separately,\n        // or rely on API-key parsing (before AS3), but this is \"best practices\".\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n            \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n            'variable or passing `new ApolloServer({apollo: {graphRef}})`.',\n        );\n      }\n\n      // Ensure a provided override schema can be parsed and validated\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = validateSchema(\n            buildSchema(overrideReportedSchema, { noLocation: true }),\n          );\n          if (validationErrors.length) {\n            throw new Error(\n              validationErrors.map((error) => error.message).join('\\n'),\n            );\n          }\n        } catch (err) {\n          throw new Error(\n            'The schema provided to overrideReportedSchema failed to parse or ' +\n              `validate: ${(err as Error).message}`,\n          );\n        }\n      }\n\n      if (schemaIsSubgraph(schema)) {\n        throw Error(\n          [\n            'Schema reporting is not yet compatible with Apollo Federation subgraphs.',\n            \"If you're interested in using schema reporting with subgraphs,\",\n            'please contact Apollo support. To set up managed federation, see',\n            'https://go.apollo.dev/s/managed-federation',\n          ].join(' '),\n        );\n      }\n\n      if (endpointUrl !== undefined) {\n        logger.info(\n          `Apollo schema reporting: schema reporting URL override: ${endpointUrl}`,\n        );\n      }\n\n      const baseSchemaReport: Omit<SchemaReport, 'coreSchemaHash'> = {\n        bootId,\n        graphRef,\n        // The infra environment in which this edge server is running, e.g. localhost, Kubernetes\n        // Length must be <= 256 characters.\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        // An identifier used to distinguish the version of the server code such as git or docker sha.\n        // Length must be <= 256 characters\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        // \"An identifier for the server instance. Length must be <= 256 characters.\n        serverId:\n          process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os.hostname(),\n        libraryVersion: `@apollo/server@${packageVersion}`,\n      };\n      let currentSchemaReporter: SchemaReporter | undefined;\n\n      return {\n        schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }): void {\n          if (overrideReportedSchema !== undefined) {\n            if (currentSchemaReporter) {\n              // When the schema to report has been overridden, there is no need\n              // to create a new schema reporter.\n              return;\n            } else {\n              logger.info(\n                'Apollo schema reporting: schema to report has been overridden',\n              );\n            }\n          }\n\n          const coreSchema =\n            overrideReportedSchema ??\n            coreSupergraphSdl ??\n            printSchema(apiSchema);\n          const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n          const schemaReport: SchemaReport = {\n            ...baseSchemaReport,\n            coreSchemaHash,\n          };\n\n          currentSchemaReporter?.stop();\n          currentSchemaReporter = new SchemaReporter({\n            schemaReport,\n            coreSchema,\n            apiKey: key,\n            endpointUrl,\n            logger,\n            // Jitter the startup between 0 and 10 seconds\n            initialReportingDelayInMs: Math.floor(\n              Math.random() * (initialDelayMaxMs ?? 10_000),\n            ),\n            fallbackReportingDelayInMs: 20_000,\n            fetcher,\n          });\n          currentSchemaReporter.start();\n\n          logger.info(\n            'Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n              `https://studio.apollographql.com/graph/${encodeURI(\n                graphRef,\n              )}/ with server info ${JSON.stringify(schemaReport)}`,\n          );\n        },\n        async serverWillStop() {\n          currentSchemaReporter?.stop();\n        },\n      };\n    },\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA4DM,SAAU,kCACd,EACE,iBAAiB,EACjB,sBAAsB,EACtB,WAAW,EACX,OAAO,EAAA,GACqC,OAAO,MAAM,CAAC,KAAK;IAEjE,MAAM,SAAS,CAAA,GAAA,oLAAA,CAAA,KAAM,AAAN;IAEf,OAAO,CAAA,GAAA,qKAAA,CAAA,iBAAc,AAAd,EAAe;QACpB,wBAAwB;QACxB,wBAAwB;QACxB,MAAM,iBAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;YAC9C,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;YAC1B,IAAI,CAAC,KAAK;gBACR,MAAM,MACJ,8EACE;YAEN;YACA,IAAI,CAAC,UAAU;gBAGb,MAAM,MACJ,oFACE,mFACA;YAEN;YAGA,IAAI,wBAAwB;gBAC1B,IAAI;oBACF,MAAM,mBAAmB,CAAA,GAAA,8IAAA,CAAA,iBAAc,AAAd,EACvB,CAAA,GAAA,yJAAA,CAAA,cAAW,AAAX,EAAY,wBAAwB;wBAAE,YAAY;oBAAI;oBAExD,IAAI,iBAAiB,MAAM,EAAE;wBAC3B,MAAM,IAAI,MACR,iBAAiB,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO,EAAE,IAAI,CAAC;oBAExD;gBACF,EAAE,OAAO,KAAK;oBACZ,MAAM,IAAI,MACR,sEACE,CAAA,UAAA,EAAc,IAAc,OAAO,CAAA,CAAE;gBAE3C;YACF;YAEA,IAAI,CAAA,GAAA,iLAAA,CAAA,mBAAgB,AAAhB,EAAiB,SAAS;gBAC5B,MAAM,MACJ;oBACE;oBACA;oBACA;oBACA;iBACD,CAAC,IAAI,CAAC;YAEX;YAEA,IAAI,gBAAgB,WAAW;gBAC7B,OAAO,IAAI,CACT,CAAA,wDAAA,EAA2D,YAAW,CAAE;YAE5E;YAEA,MAAM,mBAAyD;gBAC7D;gBACA;gBAGA,UAAU,QAAQ,GAAG,CAAC,sBAAsB,IAAI;gBAChD,gBAAgB,CAAA,KAAA,EAAQ,QAAQ,OAAO,CAAA,CAAE;gBAGzC,aAAa,QAAQ,GAAG,CAAC,0BAA0B;gBAEnD,UACE,QAAQ,GAAG,CAAC,gBAAgB,IAAI,QAAQ,GAAG,CAAC,QAAQ,IAAI,qCAAA,CAAA,UAAE,CAAC,QAAQ;gBACrE,gBAAgB,CAAA,eAAA,EAAkB,kLAAA,CAAA,iBAAc,CAAA,CAAE;;YAEpD,IAAI;YAEJ,OAAO;gBACL,uBAAsB,EAAE,SAAS,EAAE,iBAAiB,EAAE;oBACpD,IAAI,2BAA2B,WAAW;wBACxC,IAAI,uBAAuB;4BAGzB;wBACF,OAAO;4BACL,OAAO,IAAI,CACT;wBAEJ;oBACF;oBAEA,MAAM,aACJ,0BACA,qBACA,CAAA,GAAA,sJAAA,CAAA,cAAW,AAAX,EAAY;oBACd,MAAM,iBAAiB,CAAA,GAAA,qLAAA,CAAA,wBAAqB,AAArB,EAAsB;oBAC7C,MAAM,eAA6B;wBACjC,GAAG,gBAAgB;wBACnB;;oBAGF,uBAAuB;oBACvB,wBAAwB,IAAI,kMAAA,CAAA,iBAAc,CAAC;wBACzC;wBACA;wBACA,QAAQ;wBACR;wBACA;wBAEA,2BAA2B,KAAK,KAAK,CACnC,KAAK,MAAM,KAAK,CAAC,qBAAqB,KAAM;wBAE9C,4BAA4B;wBAC5B;;oBAEF,sBAAsB,KAAK;oBAE3B,OAAO,IAAI,CACT,kFACE,CAAA,uCAAA,EAA0C,UACxC,UACD,mBAAA,EAAsB,KAAK,SAAS,CAAC,cAAa,CAAE;gBAE3D;gBACA,MAAM;oBACJ,uBAAuB;gBACzB;;QAEJ;;AAEJ"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}